#pragma checksum "/home/yjin/TspWithGeneticSharp/Pages/Tsp.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "cbf1b3843168cbb9bdf7396eb15d02790bd3e40c"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TspWithGeneticSharp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "/home/yjin/TspWithGeneticSharp/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 2 "/home/yjin/TspWithGeneticSharp/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#line 3 "/home/yjin/TspWithGeneticSharp/_Imports.razor"
using Microsoft.AspNetCore.Components.Layouts;

#line default
#line hidden
#line 4 "/home/yjin/TspWithGeneticSharp/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 5 "/home/yjin/TspWithGeneticSharp/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 6 "/home/yjin/TspWithGeneticSharp/_Imports.razor"
using TspWithGeneticSharp;

#line default
#line hidden
#line 7 "/home/yjin/TspWithGeneticSharp/_Imports.razor"
using TspWithGeneticSharp.Shared;

#line default
#line hidden
    [Microsoft.AspNetCore.Components.Layouts.LayoutAttribute(typeof(MainLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/tsp")]
    public class Tsp : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 27 "/home/yjin/TspWithGeneticSharp/Pages/Tsp.razor"
       
    int _numberOfCities = 10;
    int _canvasWidth;
    int _canvasHeight;
    bool _initialized;
    TspGA _tspGA = new TspGA();

    async Task InitializeGAAsync()
    {
        // This need to be called after the first render to get
        // the size of the canvas.
        var size = await _js.InvokeAsync<int[]>("initializeCanvas");
        _canvasWidth = size[0];
        _canvasHeight = size[1];
        _tspGA.GenerationRan += HandleGenerationRan;
        ResetGA();
    }

    void HandleGenerationRan()
    {
        Console.WriteLine($"Generation: {_tspGA.GenerationsNumber} - Distance: {_tspGA.BestChromosome.Distance}");
        StateHasChanged();
    }

    void ResetGA()
    {
        _tspGA.Initialize(_numberOfCities, _canvasWidth, _canvasHeight);
        StateHasChanged();
    }

    void StopGA()
    {
        _tspGA.Stop();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync()
    {
        if (!_initialized) {
            _initialized = true;
            await InitializeGAAsync();
        }
        
        await _js.InvokeAsync<object>("clearCanvas");
        await DrawCitiesAsync();
        await DrawRouteAsync();
    }
    async Task DrawCitiesAsync()
{
    foreach(var city in _tspGA.Fitness.Cities)
        await _js.InvokeAsync<object>("drawCircle", city.X, city.Y, 10);
} 
async Task DrawRouteAsync()
{
    var bestChromosome = _tspGA.BestChromosome;

    if(bestChromosome != null)
    {
        var genes = bestChromosome.GetGenes();
        var fitness = _tspGA.Fitness;
        var firstCity = fitness.Cities[(int)genes[0].Value];
        var previousCity = firstCity;

        for(var i = 1; i < genes.Length; i++)
        {
            var city = fitness.Cities[(int)genes[i].Value];
            await _js.InvokeAsync<object>("drawLine", previousCity.X, previousCity.Y, city.X, city.Y);

            previousCity = city;
        }

        await _js.InvokeAsync<object>("drawLine", previousCity.X, previousCity.Y, firstCity.X, firstCity.Y);
    }
}

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime _js { get; set; }
    }
}
#pragma warning restore 1591
